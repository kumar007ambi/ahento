{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = new Subject();\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAASQ-ds6AWMDqPkvtLqcDK-7q79GSAjZ0', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }, {\n      headers: new HttpHeaders({\n        'Custom-header': 'Hello'\n      })\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + `{FIREBASE_API_KEY}`, {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error Occured';\n    if (!errorRes.error || errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMIAL_EXISTS':\n        errorMessage = 'This email already Exists';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","Subject","throwError","catchError","tap","User","AuthService","constructor","http","user","signup","email","password","post","returnSecureToken","headers","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","userId","token","expirationDate","Date","getTime","next","errorRes","errorMessage","error","message","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/kumar007ambi/ahento/src/app/auth/auth.service.ts"],"sourcesContent":["import {\r\n  HttpClient,\r\n  HttpErrorResponse,\r\n  HttpHeaders,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { User } from './user.model';\r\n\r\nexport interface AuthResponceData {\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  registered?: boolean;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  user = new Subject<User>();\r\n  constructor(private http: HttpClient) {}\r\n\r\n  signup(email: string, password: string) {\r\n    return this.http\r\n      .post<AuthResponceData>(\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAASQ-ds6AWMDqPkvtLqcDK-7q79GSAjZ0',\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true,\r\n        },\r\n        {\r\n          headers: new HttpHeaders({ 'Custom-header': 'Hello' }),\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap((resData) => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    return this.http\r\n      .post<AuthResponceData>(\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' +\r\n          `{FIREBASE_API_KEY}`,\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true,\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap((resData) => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  private handleAuthentication(\r\n    email: string,\r\n    userId: string,\r\n    token: string,\r\n    expiresIn: number\r\n  ) {\r\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n    const user = new User(email, userId, token, expirationDate);\r\n    this.user.next(user);\r\n  }\r\n\r\n  private handleError(errorRes: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error Occured';\r\n    if (!errorRes.error || errorRes.error.error) {\r\n      return throwError(errorMessage);\r\n    }\r\n    switch (errorRes.error.error.message) {\r\n      case 'EMIAL_EXISTS':\r\n        errorMessage = 'This email already Exists';\r\n        break;\r\n      case 'EMAIL_NOT_FOUND':\r\n        errorMessage = 'This email does not exist';\r\n        break;\r\n      case 'INVALID_PASSWORD':\r\n        errorMessage = 'This password is not correct';\r\n        break;\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAGEA,WAAW,QACN,sBAAsB;AAE7B,SAASC,OAAO,EAAEC,UAAU,QAAQ,MAAM;AAC1C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,IAAI,QAAQ,cAAc;;;AAYnC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADxB,KAAAC,IAAI,GAAG,IAAIR,OAAO,EAAQ;EACa;EAEvCS,MAAMA,CAACC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CACH,uGAAuG,EACvG;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,EACD;MACEC,OAAO,EAAE,IAAIf,WAAW,CAAC;QAAE,eAAe,EAAE;MAAO,CAAE;KACtD,CACF,CACAgB,IAAI,CACHb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAC5Bb,GAAG,CAAEc,OAAO,IAAI;MACd,IAAI,CAACC,oBAAoB,CACvBD,OAAO,CAACP,KAAK,EACbO,OAAO,CAACE,OAAO,EACfF,OAAO,CAACG,OAAO,EACf,CAACH,OAAO,CAACI,SAAS,CACnB;IACH,CAAC,CAAC,CACH;EACL;EAEAC,KAAKA,CAACZ,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CACH,4EAA4E,GAC1E,oBAAoB,EACtB;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF,CACAE,IAAI,CACHb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,EAC5Bb,GAAG,CAAEc,OAAO,IAAI;MACd,IAAI,CAACC,oBAAoB,CACvBD,OAAO,CAACP,KAAK,EACbO,OAAO,CAACE,OAAO,EACfF,OAAO,CAACG,OAAO,EACf,CAACH,OAAO,CAACI,SAAS,CACnB;IACH,CAAC,CAAC,CACH;EACL;EAEQH,oBAAoBA,CAC1BR,KAAa,EACba,MAAc,EACdC,KAAa,EACbH,SAAiB;IAEjB,MAAMI,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGN,SAAS,GAAG,IAAI,CAAC;IACxE,MAAMb,IAAI,GAAG,IAAIJ,IAAI,CAACM,KAAK,EAAEa,MAAM,EAAEC,KAAK,EAAEC,cAAc,CAAC;IAC3D,IAAI,CAACjB,IAAI,CAACoB,IAAI,CAACpB,IAAI,CAAC;EACtB;EAEQQ,WAAWA,CAACa,QAA2B;IAC7C,IAAIC,YAAY,GAAG,0BAA0B;IAC7C,IAAI,CAACD,QAAQ,CAACE,KAAK,IAAIF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAE;MAC3C,OAAO9B,UAAU,CAAC6B,YAAY,CAAC;;IAEjC,QAAQD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MAClC,KAAK,cAAc;QACjBF,YAAY,GAAG,2BAA2B;QAC1C;MACF,KAAK,iBAAiB;QACpBA,YAAY,GAAG,2BAA2B;QAC1C;MACF,KAAK,kBAAkB;QACrBA,YAAY,GAAG,8BAA8B;QAC7C;;IAEJ,OAAO7B,UAAU,CAAC6B,YAAY,CAAC;EACjC;EAAC,QAAAG,CAAA,G;qBAlFU5B,WAAW,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXjC,WAAW;IAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;IAAAC,UAAA,EADE;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}